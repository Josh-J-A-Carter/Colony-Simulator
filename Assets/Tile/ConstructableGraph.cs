using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Tilemaps;

public class ConstructableGraph {

    Dictionary<Vector2Int, (Vector2Int, Constructable)> constructables;

    Dictionary<TileBase, Constructable> autoGeneratedConstructables;

    Tilemap worldMap;

    TileManager parent;

    public ConstructableGraph(Tilemap worldMap, TileManager parent) {
        this.constructables = new Dictionary<Vector2Int, (Vector2Int, Constructable)>();
        this.autoGeneratedConstructables = new Dictionary<TileBase, Constructable>();
        this.worldMap = worldMap;
        this.parent = parent;
    }

    public void SetConstructable(Vector2Int position, (Vector2Int, Constructable) value) {
        constructables[position] = value;
    }

    public void RemoveConstructable(Vector2Int position) {
        constructables.Remove(position);
    }

    public (Vector2Int, Constructable) GetConstructable(Vector2Int position) {

        // There isn't a tile here at all
        if (!worldMap.HasTile((Vector3Int) position)) return (Vector2Int.zero, null);
        
        (Vector2Int, Constructable) value;
        if (constructables.TryGetValue(position, out value)) return value;



        ///
        /// There is not a constructable here, but there is still a tile, so create a fake constructable instead
        /// NOTE: This is a temporary solution; it can potentially be removed once world generation is completely procedural
        /// 

        TileBase t = worldMap.GetTile((Vector3Int) position);

        // Have we already auto-generated a constructable for this tile type?
        Constructable existingConstructable;
        if (autoGeneratedConstructables.TryGetValue(t, out existingConstructable)) return (position, existingConstructable);

        Constructable newConstructable = (Constructable) ScriptableObject.CreateInstance(typeof(Constructable));
        newConstructable.SetData(
            new GridRow[1]{
                new GridRow { 
                    gridEntries = new GridEntry[1]{
                        new GridEntry {
                            worldTile = t,
                            previewTile = null,
                            obstructive = !parent.IsUnobstructed(position.x, position.y)
                        }
                    }
                }
            });

        autoGeneratedConstructables.Add(t, newConstructable);
        return (position, newConstructable);
        
    }
}
